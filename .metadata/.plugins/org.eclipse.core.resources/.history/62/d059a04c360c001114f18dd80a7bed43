/*
 * rtx.c
 *
 *  Created on: 2011-11-07
 *      Author: necross
 */

#include "k_rtx.h"

//Ali, put your initialization here;
//int send_message( int dest_process_id, MsgEnv, *msg_envelope );
//MsgEnv * receive_message( );
//int send_console_chars(MsgEnv * message_envelope );
//int get_console_chars(MsgEnv * message_envelope );

k_RTX * kernel;

PCB * getPCB(int pid){
	PCB * pcb;
	pcb = SearchQueue(kernel->rq, pid);
	if(!pcb){
		pcb = SearchQueue(kernel->bq, pid);
	}
	return pcb;
}

MsgEnv * k_receive_msg(){
	//get the process own pcb
	PCB * pcb = kernel->current_process;
	if(pcb->state == IS_IPROCESS)
		return NULL;
	if(pcb->msgEnvQueue == NULL){
		pcb->state = NO_BLK_RCV;
		return NULL;
	}else{
		MsgEnv * result = pcb->msgEnvQueue;
		pcb->msgEnvQueue = result->nextMsgEnv;
		result->nextMsgEnv = NULL;
		return result;
	}
}

int k_send_messsage(int dest_process_id, MsgEnv * msg_envelope){
	PCB * pcb = getPCB(dest_process_id);
	if(!pcb){
		return -1;
	}
	msg_envelope->senderID = kernel->current_process;
	msg_envelope->destID = dest_process_id;
	MsgEnv * tail = pcb->msgEnvQueue;
	if(tail){
		while(tail->nextMsgEnv)
			tail = tail->nextMsgEnv;
		tail->nextMsgEnv = msg_envelope;
	}else{
		pcb->msgEnvQueue = msg_envelope;
	}
	return 0;
}

int k_send_console_chars(MsgEnv * message_envelope );

int k_get_console_chars(MsgEnv * message_envelope );
